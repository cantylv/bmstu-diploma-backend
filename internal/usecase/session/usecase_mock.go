// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package session is a generated GoMock package.
package session

import (
	alias "2024_1_kayros/internal/utils/alias"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// DeleteKey mocks base method.
func (m *MockUsecase) DeleteKey(ctx context.Context, key alias.SessionKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockUsecaseMockRecorder) DeleteKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockUsecase)(nil).DeleteKey), ctx, key)
}

// GetValue mocks base method.
func (m *MockUsecase) GetValue(ctx context.Context, key alias.SessionKey) (alias.SessionValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, key)
	ret0, _ := ret[0].(alias.SessionValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockUsecaseMockRecorder) GetValue(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockUsecase)(nil).GetValue), ctx, key)
}

// SetValue mocks base method.
func (m *MockUsecase) SetValue(ctx context.Context, key alias.SessionKey, value alias.SessionValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue.
func (mr *MockUsecaseMockRecorder) SetValue(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockUsecase)(nil).SetValue), ctx, key, value)
}
