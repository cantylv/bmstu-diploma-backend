// Code generated by MockGen. DO NOT EDIT.
// Source: ./rest.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	rest "2024_1_kayros/gen/go/rest"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRest is a mock of Rest interface.
type MockRest struct {
	ctrl     *gomock.Controller
	recorder *MockRestMockRecorder
}

// MockRestMockRecorder is the mock recorder for MockRest.
type MockRestMockRecorder struct {
	mock *MockRest
}

// NewMockRest creates a new mock instance.
func NewMockRest(ctrl *gomock.Controller) *MockRest {
	mock := &MockRest{ctrl: ctrl}
	mock.recorder = &MockRestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRest) EXPECT() *MockRestMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRest) GetAll(ctx context.Context) (*rest.RestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*rest.RestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRestMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRest)(nil).GetAll), ctx)
}

// GetByFilter mocks base method.
func (m *MockRest) GetByFilter(ctx context.Context, id *rest.Id) (*rest.RestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, id)
	ret0, _ := ret[0].(*rest.RestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockRestMockRecorder) GetByFilter(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockRest)(nil).GetByFilter), ctx, id)
}

// GetById mocks base method.
func (m *MockRest) GetById(ctx context.Context, id *rest.RestId) (*rest.Rest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*rest.Rest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRestMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRest)(nil).GetById), ctx, id)
}

// GetCategoryList mocks base method.
func (m *MockRest) GetCategoryList(ctx context.Context) (*rest.CategoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryList", ctx)
	ret0, _ := ret[0].(*rest.CategoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryList indicates an expected call of GetCategoryList.
func (mr *MockRestMockRecorder) GetCategoryList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryList", reflect.TypeOf((*MockRest)(nil).GetCategoryList), ctx)
}

// GetLastRests mocks base method.
func (m *MockRest) GetLastRests(ctx context.Context, userId, limit uint64) (*rest.RestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastRests", ctx, userId, limit)
	ret0, _ := ret[0].(*rest.RestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastRests indicates an expected call of GetLastRests.
func (mr *MockRestMockRecorder) GetLastRests(ctx, userId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRests", reflect.TypeOf((*MockRest)(nil).GetLastRests), ctx, userId, limit)
}

// GetTop mocks base method.
func (m *MockRest) GetTop(ctx context.Context, limit uint64) (*rest.RestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTop", ctx, limit)
	ret0, _ := ret[0].(*rest.RestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTop indicates an expected call of GetTop.
func (mr *MockRestMockRecorder) GetTop(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTop", reflect.TypeOf((*MockRest)(nil).GetTop), ctx, limit)
}
