// Code generated by MockGen. DO NOT EDIT.
// Source: user_grpc.pb.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	user "2024_1_kayros/gen/go/user"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockUserManagerClient is a mock of UserManagerClient interface.
type MockUserManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerClientMockRecorder
}

// MockUserManagerClientMockRecorder is the mock recorder for MockUserManagerClient.
type MockUserManagerClientMockRecorder struct {
	mock *MockUserManagerClient
}

// NewMockUserManagerClient creates a new mock instance.
func NewMockUserManagerClient(ctrl *gomock.Controller) *MockUserManagerClient {
	mock := &MockUserManagerClient{ctrl: ctrl}
	mock.recorder = &MockUserManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagerClient) EXPECT() *MockUserManagerClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserManagerClient) Create(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*user.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserManagerClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManagerClient)(nil).Create), varargs...)
}

// GetAddressByUnauthId mocks base method.
func (m *MockUserManagerClient) GetAddressByUnauthId(ctx context.Context, in *user.UnauthId, opts ...grpc.CallOption) (*user.Address, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAddressByUnauthId", varargs...)
	ret0, _ := ret[0].(*user.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByUnauthId indicates an expected call of GetAddressByUnauthId.
func (mr *MockUserManagerClientMockRecorder) GetAddressByUnauthId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByUnauthId", reflect.TypeOf((*MockUserManagerClient)(nil).GetAddressByUnauthId), varargs...)
}

// GetData mocks base method.
func (m *MockUserManagerClient) GetData(ctx context.Context, in *user.Email, opts ...grpc.CallOption) (*user.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetData", varargs...)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockUserManagerClientMockRecorder) GetData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockUserManagerClient)(nil).GetData), varargs...)
}

// IsPassswordEquals mocks base method.
func (m *MockUserManagerClient) IsPassswordEquals(ctx context.Context, in *user.PasswordCheck, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsPassswordEquals", varargs...)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPassswordEquals indicates an expected call of IsPassswordEquals.
func (mr *MockUserManagerClientMockRecorder) IsPassswordEquals(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPassswordEquals", reflect.TypeOf((*MockUserManagerClient)(nil).IsPassswordEquals), varargs...)
}

// SetNewPassword mocks base method.
func (m *MockUserManagerClient) SetNewPassword(ctx context.Context, in *user.PasswordsChange, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetNewPassword", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNewPassword indicates an expected call of SetNewPassword.
func (mr *MockUserManagerClientMockRecorder) SetNewPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPassword", reflect.TypeOf((*MockUserManagerClient)(nil).SetNewPassword), varargs...)
}

// UpdateAddress mocks base method.
func (m *MockUserManagerClient) UpdateAddress(ctx context.Context, in *user.AddressData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAddress", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserManagerClientMockRecorder) UpdateAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserManagerClient)(nil).UpdateAddress), varargs...)
}

// UpdateAddressByUnauthId mocks base method.
func (m *MockUserManagerClient) UpdateAddressByUnauthId(ctx context.Context, in *user.AddressDataUnauth, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAddressByUnauthId", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddressByUnauthId indicates an expected call of UpdateAddressByUnauthId.
func (mr *MockUserManagerClientMockRecorder) UpdateAddressByUnauthId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressByUnauthId", reflect.TypeOf((*MockUserManagerClient)(nil).UpdateAddressByUnauthId), varargs...)
}

// UpdateData mocks base method.
func (m *MockUserManagerClient) UpdateData(ctx context.Context, in *user.UpdateUserData, opts ...grpc.CallOption) (*user.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateData", varargs...)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockUserManagerClientMockRecorder) UpdateData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockUserManagerClient)(nil).UpdateData), varargs...)
}

// MockUserManagerServer is a mock of UserManagerServer interface.
type MockUserManagerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerServerMockRecorder
}

// MockUserManagerServerMockRecorder is the mock recorder for MockUserManagerServer.
type MockUserManagerServerMockRecorder struct {
	mock *MockUserManagerServer
}

// NewMockUserManagerServer creates a new mock instance.
func NewMockUserManagerServer(ctrl *gomock.Controller) *MockUserManagerServer {
	mock := &MockUserManagerServer{ctrl: ctrl}
	mock.recorder = &MockUserManagerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagerServer) EXPECT() *MockUserManagerServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserManagerServer) Create(arg0 context.Context, arg1 *user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserManagerServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManagerServer)(nil).Create), arg0, arg1)
}

// GetAddressByUnauthId mocks base method.
func (m *MockUserManagerServer) GetAddressByUnauthId(arg0 context.Context, arg1 *user.UnauthId) (*user.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByUnauthId", arg0, arg1)
	ret0, _ := ret[0].(*user.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByUnauthId indicates an expected call of GetAddressByUnauthId.
func (mr *MockUserManagerServerMockRecorder) GetAddressByUnauthId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByUnauthId", reflect.TypeOf((*MockUserManagerServer)(nil).GetAddressByUnauthId), arg0, arg1)
}

// GetData mocks base method.
func (m *MockUserManagerServer) GetData(arg0 context.Context, arg1 *user.Email) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockUserManagerServerMockRecorder) GetData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockUserManagerServer)(nil).GetData), arg0, arg1)
}

// IsPassswordEquals mocks base method.
func (m *MockUserManagerServer) IsPassswordEquals(arg0 context.Context, arg1 *user.PasswordCheck) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPassswordEquals", arg0, arg1)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPassswordEquals indicates an expected call of IsPassswordEquals.
func (mr *MockUserManagerServerMockRecorder) IsPassswordEquals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPassswordEquals", reflect.TypeOf((*MockUserManagerServer)(nil).IsPassswordEquals), arg0, arg1)
}

// SetNewPassword mocks base method.
func (m *MockUserManagerServer) SetNewPassword(arg0 context.Context, arg1 *user.PasswordsChange) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewPassword", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNewPassword indicates an expected call of SetNewPassword.
func (mr *MockUserManagerServerMockRecorder) SetNewPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPassword", reflect.TypeOf((*MockUserManagerServer)(nil).SetNewPassword), arg0, arg1)
}

// UpdateAddress mocks base method.
func (m *MockUserManagerServer) UpdateAddress(arg0 context.Context, arg1 *user.AddressData) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserManagerServerMockRecorder) UpdateAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserManagerServer)(nil).UpdateAddress), arg0, arg1)
}

// UpdateAddressByUnauthId mocks base method.
func (m *MockUserManagerServer) UpdateAddressByUnauthId(arg0 context.Context, arg1 *user.AddressDataUnauth) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddressByUnauthId", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddressByUnauthId indicates an expected call of UpdateAddressByUnauthId.
func (mr *MockUserManagerServerMockRecorder) UpdateAddressByUnauthId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressByUnauthId", reflect.TypeOf((*MockUserManagerServer)(nil).UpdateAddressByUnauthId), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockUserManagerServer) UpdateData(arg0 context.Context, arg1 *user.UpdateUserData) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockUserManagerServerMockRecorder) UpdateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockUserManagerServer)(nil).UpdateData), arg0, arg1)
}

// mustEmbedUnimplementedUserManagerServer mocks base method.
func (m *MockUserManagerServer) mustEmbedUnimplementedUserManagerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserManagerServer")
}

// mustEmbedUnimplementedUserManagerServer indicates an expected call of mustEmbedUnimplementedUserManagerServer.
func (mr *MockUserManagerServerMockRecorder) mustEmbedUnimplementedUserManagerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserManagerServer", reflect.TypeOf((*MockUserManagerServer)(nil).mustEmbedUnimplementedUserManagerServer))
}

// MockUnsafeUserManagerServer is a mock of UnsafeUserManagerServer interface.
type MockUnsafeUserManagerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserManagerServerMockRecorder
}

// MockUnsafeUserManagerServerMockRecorder is the mock recorder for MockUnsafeUserManagerServer.
type MockUnsafeUserManagerServerMockRecorder struct {
	mock *MockUnsafeUserManagerServer
}

// NewMockUnsafeUserManagerServer creates a new mock instance.
func NewMockUnsafeUserManagerServer(ctrl *gomock.Controller) *MockUnsafeUserManagerServer {
	mock := &MockUnsafeUserManagerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserManagerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserManagerServer) EXPECT() *MockUnsafeUserManagerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserManagerServer mocks base method.
func (m *MockUnsafeUserManagerServer) mustEmbedUnimplementedUserManagerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserManagerServer")
}

// mustEmbedUnimplementedUserManagerServer indicates an expected call of mustEmbedUnimplementedUserManagerServer.
func (mr *MockUnsafeUserManagerServerMockRecorder) mustEmbedUnimplementedUserManagerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserManagerServer", reflect.TypeOf((*MockUnsafeUserManagerServer)(nil).mustEmbedUnimplementedUserManagerServer))
}
